/*
ASSIGNMENT:
Implement an evaluator for a very simple subset of Forth.

Forth is a stack-based programming language. Implement a very basic evaluator for a small subset of Forth.

Your evaluator has to support the following words:

+, -, *, / (integer arithmetic)
DUP, DROP, SWAP, OVER (stack manipulation)
Your evaluator also has to support defining new words using the customary syntax: : word-name definition ;.

To keep things simple the only data type you need to support is signed integers of at least 16 bits size.

You should use the following rules for the syntax: a number is a sequence of one or more (ASCII) digits, a word is a sequence of one or more letters, digits, symbols or punctuation that is not a number. (Forth probably uses slightly different rules, but this is close enough.)

Words are case-insensitive.
*/

// IMPLEMENTATION
package main

import (
	"fmt"
	"strconv"
	"strings"
)

type Forth struct {
	stack []int
	words map[string][]string
}

func NewForth() *Forth {
	return &Forth{
		stack: make([]int, 0),
		words: make(map[string][]string),
	}
}

func (f *Forth) Push(val int) {
	f.stack = append(f.stack, val)
}

func (f *Forth) Pop() (int, error) {
	if len(f.stack) == 0 {
		return 0, fmt.Errorf("stack underflow")
	}
	val := f.stack[len(f.stack)-1]
	f.stack = f.stack[:len(f.stack)-1]
	return val, nil
}

func (f *Forth) Evaluate(input string) error {
	words := strings.Fields(input)
	for i := 0; i < len(words); i++ {
		word := strings.ToLower(words[i])
		if word == ":" {
			i++
			if i >= len(words) {
				return fmt.Errorf("unexpected end of input after :")
			}
			name := strings.ToLower(words[i])
			definition := make([]string, 0)
			i++
			for i < len(words) && words[i] != ";" {
				definition = append(definition, words[i])
				i++
			}
			f.words[name] = definition
		} else if definition, ok := f.words[word]; ok {
			err := f.Evaluate(strings.Join(definition, " "))
			if err != nil {
				return err
			}
		} else {
			err := f.executeWord(word)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (f *Forth) executeWord(word string) error {
	switch word {
	case "+":
		return f.add()
	case "-":
		return f.subtract()
	case "*":
		return f.multiply()
	case "/":
		return f.divide()
	case "dup":
		return f.dup()
	case "drop":
		return f.drop()
	case "swap":
		return f.swap()
	case "over":
		return f.over()
	default:
		val, err := strconv.Atoi(word)
		if err == nil {
			f.Push(val)
		} else {
			return fmt.Errorf("unknown word: %s", word)
		}
	}
	return nil
}

func (f *Forth) add() error {
	if len(f.stack) < 2 {
		return fmt.Errorf("not enough operands for +")
	}
	a, _ := f.Pop()
	b, _ := f.Pop()
	f.Push(b + a)
	return nil
}

func (f *Forth) subtract() error {
	if len(f.stack) < 2 {
		return fmt.Errorf("not enough operands for -")
	}
	a, _ := f.Pop()
	b, _ := f.Pop()
	f.Push(b - a)
	return nil
}

func (f *Forth) multiply() error {
	if len(f.stack) < 2 {
		return fmt.Errorf("not enough operands for *")
	}
	a, _ := f.Pop()
	b, _ := f.Pop()
	f.Push(b * a)
	return nil
}

func (f *Forth) divide() error {
	if len(f.stack) < 2 {
		return fmt.Errorf("not enough operands for /")
	}
	a, _ := f.Pop()
	b, _ := f.Pop()
	if a == 0 {
		return fmt.Errorf("division by zero")
	}
	f.Push(b / a)
	return nil
}

func (f *Forth) dup() error {
	if len(f.stack) < 1 {
		return fmt.Errorf("not enough operands for DUP")
	}
	val := f.stack[len(f.stack)-1]
	f.Push(val)
	return nil
}

func (f *Forth) drop() error {
	if len(f.stack) < 1 {
		return fmt.Errorf("not enough operands for DROP")
	}
	_, err := f.Pop()
	return err
}

func (f *Forth) swap() error {
	if len(f.stack) < 2 {
		return fmt.Errorf("not enough operands for SWAP")
	}
	a, _ := f.Pop()
	b, _ := f.Pop()
	f.Push(a)
	f.Push(b)
	return nil
}

func (f *Forth) over() error {
	if len(f.stack) < 2 {
		return fmt.Errorf("not enough operands for OVER")
	}
	a, _ := f.stack[len(f.stack)-2], nil
	f.Push(a)
	return nil
}

func main() {
	f := NewForth()
	err := f.Evaluate("1 2 + 3 4 + *")
	if err != nil {
		fmt.Println("Error:", err)
		return
	}
	result, _ := f.Pop()
	fmt.Println("Result:", result) // Output: 21
}
